#pragma kernel CSMain

RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float4 _DirectionalLight;

float2 _PixelOffset;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

static const float PI = 3.14159265f;
static const float EPSILON = 1e-8;

float sdot(float3 _x, float3 _y, float _f = 1.0f)
{
    return saturate(dot(_x, _y) * _f);
}

float energy(float3 _colour)
{
    return dot(_colour, 1.0f / 3.0f);
}

//-------------------------------------
//- RANDOMNESS

float2 _Pixel;
float _Seed;

float rand()
{
    float result = frac(sin(_Seed / 100.0f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}


//-------------------------------------
//- SPHERES

struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};

StructuredBuffer<Sphere> _Spheres;


//-------------------------------------
//- RAY

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

Ray CreateRay(float3 _origin, float3 _direction)
{
    Ray ray;
    ray.origin = _origin;
    ray.direction = _direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 _uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(_uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}


//-------------------------------------
//- RAYHIT

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    hit.smoothness = 0.0f;
    hit.emission = float3(0.0f, 0.0f, 0.0f);
    return hit;
}


//-------------------------------------
//- INTERSECTION

void IntersectGroundPlane(Ray _ray, inout RayHit _bestHit)
{
    // Calculate distance along the ray where the ground plane is intersected
    float t = -_ray.origin.y / _ray.direction.y;
    if (t > 0 && t < _bestHit.distance)
    {
        _bestHit.distance = t;
        _bestHit.position = _ray.origin + t * _ray.direction;
        _bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        _bestHit.albedo = 0.5f;
        _bestHit.specular = 0.03f;
        _bestHit.smoothness = 0.2f;
        _bestHit.emission = float3(0.0f, 0.0f, 0.0f);
    }
}

void IntersectSphere(Ray _ray, inout RayHit _bestHit, Sphere _sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    float3 d = _ray.origin - _sphere.position;
    float p1 = -dot(_ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + _sphere.radius * _sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < _bestHit.distance)
    {
        _bestHit.distance = t;
        _bestHit.position = _ray.origin + t * _ray.direction;
        _bestHit.normal = normalize(_bestHit.position - _sphere.position);
        _bestHit.albedo = _sphere.albedo;
        _bestHit.specular = _sphere.specular;
        _bestHit.smoothness = _sphere.smoothness;
        _bestHit.emission = _sphere.emission;
    }
}


bool IntersectTriangle(Ray _ray, float3 _vert0, float3 _vert1, float3 _vert2, inout float _t, inout float _u, inout float _v)
{
    // Find the vectors for the two edges sharing vertex 0
    float3 edge1 = _vert1 - _vert0;
    float edge2 = _vert2 - _vert0;
    
    // Calculate the determinant 
    float3 pVec = cross(_ray.direction, edge2);
    
    //If the determinant is near 0, then the ray lies in plane of the triangle
    float det = dot(edge1, pVec);
    
    if (det < EPSILON)
    {
        return false;
    }
    
    float invDet = 1.0f / det;
    
    //Calculate the distance from vert0 to the ray origin
    float3 tVec = _ray.origin - _vert0;
    
    // Calculate U and test bounds
    _u = dot(tVec, pVec) * invDet;
    if (_u < 0.0f || _u > 1.0f){
        return false;
    }
    
    // Test V
    float3 qVec = cross(tVec, edge1);
    _v = dot(_ray.direction, qVec) * invDet;
    if (_v < 0.0f || _u + _v > 1.0f)
    {
        return false;
    }
    
    // Calculate T, ray intersects with Triangle
    _t = dot(edge2, qVec) * invDet;
    return true;
}



//-------------------------------------
//- TRACE

RayHit Trace(Ray _ray)
{
    RayHit bestHit = CreateRayHit();

    // Trace ground plane
    IntersectGroundPlane(_ray, bestHit);

    // Trace a single triangle
    float3 v0 = float3(-150.0f, 0, -150.0f);
    float3 v1 = float3(150.0f, 0, -150.0f);
    float3 v2 = float3(0, 150.0f * sqrt(2), -150.0f);
    float t, u, v;
    if (IntersectTriangle(_ray, v0, v1, v2, t, u, v))
    {
        if (t > 0 && t < bestHit.distance)
        {
            bestHit.distance = t;
            bestHit.position = _ray.origin + t * _ray.direction;
            bestHit.normal = normalize(cross(v1 - v0, v2 - v0));
            bestHit.albedo = 0.00f;
            bestHit.specular = 0.065 * float3(1.0f, 0.4f, 0.2f);
            bestHit.smoothness = 0.9f;
            bestHit.emission = 0.0f;
        }
    }
    
    
    
    // Trace spheres
    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    for (uint i = 0; i < numSpheres; i++)
        IntersectSphere(_ray, bestHit, _Spheres[i]);
    return bestHit;
}


//-------------------------------------
//- SAMPLING

float3x3 GetTangentSpace(float3 _normal)
{
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(_normal.x) > 0.99f)
        helper = float3(0, 0, 1);

    // Generate vectors
    float3 tangent = normalize(cross(_normal, helper));
    float3 binormal = normalize(cross(_normal, tangent));
    return float3x3(tangent, binormal, _normal);
}

float3 SampleHemisphere(float3 _normal, float _alpha)
{
    // Sample the hemisphere, where alpha determines the kind of the sampling
    float cosTheta = pow(rand(), 1.0f / (_alpha + 1.0f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    // Transform direction to world space
    return mul(tangentSpaceDir, GetTangentSpace(_normal));
}

//-------------------------------------
//- SHADE

float SmoothnessToPhongAlpha(float _s)
{
    return pow(1000.0f, _s * _s);
}

float3 Shade(inout Ray _ray, RayHit _hit)
{
    if (_hit.distance < 1.#INF)
    {
        // Calculate chances of diffuse and specular reflection
        _hit.albedo = min(1.0f - _hit.specular, _hit.albedo);
        float specChance = energy(_hit.specular);
        float diffChance = energy(_hit.albedo);

        // Roulette-select the ray's path
        float roulette = rand();
        if (roulette < specChance)
        {
            // Specular reflection
            _ray.origin = _hit.position + _hit.normal * 0.001f;
            float alpha = SmoothnessToPhongAlpha(_hit.smoothness);
            _ray.direction = SampleHemisphere(reflect(_ray.direction, _hit.normal), alpha);
            float f = (alpha + 2) / (alpha + 1);
            _ray.energy *= (1.0f / specChance) * _hit.specular * sdot(_hit.normal, _ray.direction, f);
        }
        else if (diffChance > 0 && roulette < specChance + diffChance)
        {
            // Diffuse reflection
            _ray.origin = _hit.position + _hit.normal * 0.001f;
            _ray.direction = SampleHemisphere(_hit.normal, 1.0f);
            _ray.energy *= (1.0f / diffChance) * _hit.albedo;
        }
        else
        {
            // Terminate ray
            _ray.energy = 0.0f;
        }

        return _hit.emission;
    }
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        _ray.energy = 0.0f;

        // Sample the skybox and write it
        float theta = acos(_ray.direction.y) / -PI;
        float phi = atan2(_ray.direction.x, -_ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 2;
    }
}


//-------------------------------------
//- KERNEL

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    _Pixel = id.xy;

    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);

    // Trace and shade the ray
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 8; i++)
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);

        if (!any(ray.energy))
            break;
    }

    Result[id.xy] = float4(result, 1);
}
