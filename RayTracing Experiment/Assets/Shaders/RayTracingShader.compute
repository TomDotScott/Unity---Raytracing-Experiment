// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyBoxTexture;
SamplerState sampler_SkyBoxTexture;
static const float PI = 3.14159265f;


struct Ray {
	float3 origin;
	float3 direction;
};

Ray CreateRay(float3 _origin, float3 _direction) {
	Ray ray;
	ray.origin = _origin;
	ray.direction = _direction;
	return ray;
}

Ray CreateCameraRay(float2 uv) {
	//Transform the camera origin to world space
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

	//invert the perspective projection
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

	//transform the direction from camera to world space and normalise
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);

	return CreateRay(origin, direction);
}

struct RayHit {
	float3 position;
	float distance;
	float3 normal;
};

RayHit CreateRayHit() {
	RayHit hit;
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	return hit;
}

void IntersectGroundPlane(Ray _ray, inout RayHit _bestHit) {
	//calculate the distance along the ray where the ground plane is intersected
	float t = -_ray.origin.y / _ray.direction.y;
	if (t > 0 && t < _bestHit.distance) {
		_bestHit.distance = t;
		_bestHit.position = _ray.origin + t * _ray.direction;
		_bestHit.normal = float3(0.0f, 1.0f, 0.0f);
	}
}

RayHit Trace(Ray _ray) {
	RayHit bestHit = CreateRayHit();
	IntersectGroundPlane(_ray, bestHit);
	return bestHit;
}

float3 Shade(inout Ray _ray, RayHit _hit) {
	if (_hit.distance < 1.#INF) {
		//return the normal
		return _hit.normal * 0.5f + 0.5f;
	} else {
		// Sample the skybox and write it
		float theta = acos(_ray.direction.y) / PI;
		float phi = atan2(_ray.direction.x, -_ray.direction.z / 2) / 0.5f * PI;
		return _SkyBoxTexture.SampleLevel(sampler_SkyBoxTexture, float2(phi, theta), 0).xyz;
	}
}


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
	// Get the dimensions of the RenderTexture
	uint width, height;
	Result.GetDimensions(width, height);

	// Transform pixel to [-1,1] range
	float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);

	// Get a ray for the UVs
	Ray ray = CreateCameraRay(uv);

	//Trace and Shade
	RayHit hit = Trace(ray);
	float3 result = Shade(ray, hit);
	Result[id.xy] = float4(result, 1);
}
